PROBLEMS W/ TRAINING.IPYNB + DATA_PROCESSOR.PY

TRAINING.IPYNB:: 
- inappropriate granularity of data 
- need weekly data for effective sliding-window modeling (7-day forecast)
- FRED API key + data codes need to persist in config to import accurately
- does API key need to be obfuscated in final product? 
- using StandardScaler without persisting to disk explicitly (mem concern)
- no sliding-window creation logic 
- saving directly to data/multivariate_unemployment_LSTNet.csv ==> creates ambiguity w/ unemployment_data.csv
- lack of error handling + robustness (for using an API key)

##########################################################################################

DATA_PROCESSOR.PY
- check config.py:: 
	- 'default_data_file'
	- 'data_dir'
	- TRAINING_CONFIG:: 'sequence_length', 'test_size', 'val_size'
- immediately dropping 'date' column of DF ==> need some date axis for LSTNet
- need to rework branching logic to keep monthly val for axis
- no dropna() used
- calling scaler on entire dataset before train/test split
- X, y labeling set up to jump 1 month forward instead of 7 days (contrary to LSTNet objective)
- converting all data to GPU tensors in create_sequences ==> device placement
	- stick w/ numpy arrays + let train.py handle tensor conversion? 
- manual for-loop over samples ==> vectorize or use sliding-window utilities 
- torch/sklearn -- feeding GPU tensors into train_test_split
	- sklearn expects numpy arrays + can't shuffle tensors w/ reproducibility 
	- either split before conversion to tensors or use torch-based splitter
- no random seed w/ shuffle set to False
- check where load_scaler() is called ==> does training/inference unpack both scaler + feature_names? 
- directory creation for scaler ==> need to clear out or version them 
- misc::
	- no sliding_window horizon param
	- no date-sequence alignment 
	- no handling of missing/irregular time indices
	- no boundary checks 

##########################################################################################

CHANGES: 
- switch to fredapi Python library for Fed data access 
- API key == "5bcb629a19526b04c40ac4dc78c8bb0b" 
	- can set env var FRED_API_KEY, save to file and use 'api_key_file" param, or pass directly
	















